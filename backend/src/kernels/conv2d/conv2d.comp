#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

#include "prelude.h"

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

#define NHWC 0
#define NCHW 1
#if FORMAT == NHWC
layout(set = 0, binding = 0) buffer a { readonly  TYPE_P_0 inData[BTACH_SIZE][HEIGHT_IN][WIDTH_IN][DEPTH_IN]; };
layout(set = 0, binding = 2) buffer c { TYPE_P_0 outData[BTACH_SIZE][HEIGHT_OUT][WIDTH_OUT][DEPTH_OUT]; };
#else
layout(set = 0, binding = 0) buffer a { readonly  TYPE_P_0 inData[BTACH_SIZE][DEPTH_IN][HEIGHT_IN][WIDTH_IN]; };
layout(set = 0, binding = 2) buffer c { TYPE_P_0 outData[BTACH_SIZE][DEPTH_OUT][HEIGHT_OUT][WIDTH_OUT]; };
#endif
layout(set = 0, binding = 1) buffer b { readonly  TYPE_P_0 filters[FILTER_HEIGHT][FILTER_WIDTH][DEPTH_IN][DEPTH_OUT]; };

layout(constant_id = 1) const uint stride_h = 0;
layout(constant_id = 2) const uint stride_w = 0;
layout(constant_id = 3) const uint dilation_h = 0;
layout(constant_id = 4) const uint dilation_w = 0;
layout(constant_id = 5) const uint padding_h = 0;
layout(constant_id = 6) const uint padding_w = 0;

layout(push_constant) uniform PushConstants {
	uint start;
    uint stop;
    uint in_channel;
    uint out_channel;
} push;

void main() {
    uint index = gl_GlobalInvocationID.x + push.start;

    if(index > push.stop){
        return;
    }

    uint batch_total_size = HEIGHT_OUT * WIDTH_OUT; 
    uint batch = index / batch_total_size;
    uint offset_index = (index - (batch * batch_total_size));
    uint x = offset_index / WIDTH_OUT;
    uint y = offset_index % WIDTH_OUT;

    TYPE_P_0 dotProd = TYPE_0(0);
    uint stridedX = x * stride_h;
    uint stridedY = y * stride_w;
    [[unroll]] for(uint fx = 0; fx < FILTER_HEIGHT; fx++){
        [[unroll]] for(uint fy = 0; fy < FILTER_WIDTH; fy++){
            uint xIdx = stridedX + (fx * dilation_h) - padding_h;
            uint yIdx = stridedY + (fy * dilation_w) - padding_w;
            if(xIdx < HEIGHT_IN && yIdx < WIDTH_IN && xIdx >= 0 && yIdx >= 0){
                #if FORMAT == NHWC
                dotProd += inData[batch][xIdx][yIdx][push.in_channel] * filters[fx][fy][push.in_channel][push.out_channel];
                #else
                dotProd += inData[batch][push.in_channel][xIdx][yIdx] * filters[fx][fy][push.in_channel][push.out_channel];
                #endif
            }
        }
    }
    outData[batch][x][y][push.out_channel] += dotProd;
}