#version 450
#extension GL_GOOGLE_include_directive : enable

#include "prelude.h"

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer a { readonly  TYPE_P_0 inData[]; };
layout(set = 0, binding = 1) buffer b { writeonly TYPE_P_0 outData[]; };


#define OP_SQRT       0
#define OP_EXP        1
#define OP_LOG        2
#define OP_SQUARE     3
#define OP_NEG        4
#define OP_RECIPROCAL 5
#define OP_LOG1P      6
#define OP_TANH       7
#define OP_RELU       8
layout(constant_id = 1) const uint op = 0;

layout(push_constant) uniform PushConstants {
	uint start;
    uint stop;
} push;

void main() {
    uint index = gl_GlobalInvocationID.x + push.start;

    if(index > push.stop){
        return;
    }

    switch(op){
        case OP_SQRT:
            outData[index] = sqrt(inData[index]);
            break;
        case OP_EXP:
            outData[index] = exp(inData[index]);
            break;
        case OP_LOG:
            outData[index] = log(inData[index]);
            break;
        case OP_SQUARE:
            outData[index] = inData[index] * inData[index];
            break;
        case OP_NEG:
            outData[index] = -inData[index];
            break;
        case OP_RECIPROCAL:
            outData[index] = TYPE_0(1) / inData[index];
            break;
        case OP_LOG1P:
            outData[index] = log(TYPE_0(1) + inData[index]);
            break;
        case OP_TANH:
            outData[index] = tanh(inData[index]);
            break;
        case OP_RELU:
            outData[index] = max(inData[index], TYPE_0(0));
            break;
    }
}