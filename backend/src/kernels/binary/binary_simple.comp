#version 450
#extension GL_GOOGLE_include_directive : enable

#include "prelude.h"
#include "binary.h"

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer a { readonly  TYPE_P_0 x[]; };
layout(set = 0, binding = 1) buffer b { readonly  TYPE_P_0 y[]; };
layout(set = 0, binding = 2) buffer e { writeonly TYPE_P_0 outData[]; };

layout(constant_id = 1) const uint op = 0;

layout(push_constant) uniform PushConstants {
	uint start;
    uint stop;
    uint smaller;
    uint len;
} push;

//This is for first dim broadcasts
//[8, 256, 256, 3] * [1, 256, 256, 3]
//also arrays by scalars
//[8, 256, 256, 3] * 5
//idx = i % total_elements(smaller)
void main(){
    uint index = gl_GlobalInvocationID.x + push.start;

    if(index > push.stop){
        return;
    }

    TYPE_P_0 X = TYPE_0(0);
    TYPE_P_0 Y = TYPE_0(0);
    if(push.smaller == 0){
        X = x[index % push.len];
        Y = y[index];
    }else{
        X = x[index];
        Y = y[index % push.len];
    }

    switch(op){
        case OP_MUL:
            outData[index] = X * Y;
            break;
        case OP_ADD:
            outData[index] = X + Y;
            break;
        case OP_SUB:
            outData[index] = X - Y;
            break;
        case OP_DIV:
            outData[index] = X / Y;
            break;
        case OP_DIV_NO_NAN:
            if(Y == TYPE_0(0)){
                outData[index] = TYPE_0(0);
            }else{
                outData[index] = X / Y;
            }
            break;
        case OP_DIV_REAL:
            outData[index] = X / Y;
            break;
        case OP_MAXIMUM:
            outData[index] = max(X, Y);
            break;
        case OP_MINIMUM:
            outData[index] = min(X, Y);
            break;
        case OP_POW:
            outData[index] = power(X, Y);
            break;
    }
}